package main

import (
	"fmt"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generatePythonFile(gen, f)
		}
		return nil
	})
}

func generatePythonFile(gen *protogen.Plugin, file *protogen.File) {
	// Generate Python module name from proto package
	modPath := strings.ReplaceAll(file.GoPackageName, ".", "/")
	filename := filepath.Join(modPath, file.GeneratedFilenamePrefix+"_mcp.py")
	g := gen.NewGeneratedFile(filename, "")

	// Write Python file header
	g.P("# Code generated by protoc-gen-mcp. DO NOT EDIT.")
	g.P("# source: ", file.Desc.Path())
	g.P()
	g.P("import os")
	g.P("import json")
	g.P("from typing import Any, List, Optional, Dict")
	g.P()
	g.P("from mcp.server import Server")
	g.P("from mcp.types import Resource, Tool, TextContent")
	g.P()

	// Generate MCP server class for each service
	for _, service := range file.Services {
		generatePythonMCPService(g, service)
	}
}

func generatePythonMCPService(g *protogen.GeneratedFile, service *protogen.Service) {
	// Generate Python class name
	className := fmt.Sprintf("%sMCPServer", service.GoName)

	g.P("class ", className, "(Server):")
	g.P("    def __init__(self):")
	g.P(`        super().__init__("`, strings.ToLower(service.GoName), `-server")`)
	g.P()

	// Generate tool listing method
	generateToolLister(g, service)
}

func generateToolLister(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("    async def list_tools(self) -> List[Tool]:")
	g.P("        return [")
	for _, method := range service.Methods {
		generateToolDefinition(g, method)
	}
	g.P("        ]")
}

func generateToolDefinition(g *protogen.GeneratedFile, method *protogen.Method) {
	toolName := strings.ToLower(method.GoName)
	g.P("            Tool(")
	g.P(`                name="`, toolName, `",`)
	g.P(`                description="`, method.Comments.Leading.String(), `",`)
	g.P("                inputSchema={")
	g.P(`                    "type": "object",`)
	g.P(`                    "properties": {`)
	g.P(`                        "instruction": {"type": "string", "description": "Natural language instruction for the operation"}`)
	g.P("                    },")
	g.P(`                    "required": ["instruction"]`)
	g.P("                }")
	g.P("            ),")
}
